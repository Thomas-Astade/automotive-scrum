page buildingBlocks {
    label "building blocks";
    subpages allerlei;
}

activity allerlei {
    transform aTest;
}

virtual artefact aTest {
}

process mi_manual_integration {
    label "manual integration";    
    responsible mi_project_manager;
    transform mi_customer_requirements;
    create mi_customer_binary;
    repository mi_shared_folder, mi_git;
    subactivities mi_develop;
    text md/mi/process.md;
}

artefact mi_customer_requirements {
    label "customer requirements";
}

artefact mi_customer_binary {
    label "customer binary";
}

repository mi_shared_folder {
    label "shared folder";
    contains mi_customer_requirements;
}

repository mi_git {
    label "git";
    contains mi_masterbranch, mi_developmentbranch;
}

folder mi_masterbranch {
    label "master branch";
    contains mi_integrated_source;
    brief "the master branch for all code changes";
}

folder mi_developmentbranch {
    label "development branch";
    contains mi_unintegrated_source;
    brief "the master branch for all code changes";
}

role mi_project_manager {
    label "process manager";
    brief "the over all responsible for this project";
}

activity mi_develop {
    label "develop";
    responsible mi_developer;
    transform mi_customer_requirements;
    subactivities mi_write_code, mi_commit, 
        mi_integrate, mi_build_binary;
}

activity mi_write_code {
    label "write code";
    transform mi_customer_requirements;
    create mi_sourcecode;
}

role mi_developer {
    label "developer";
    brief "In this process thes role does all the technical work";
}

namespace mi {
    include resources/blocks/dev_basic.txt;
}

artefact mi_unintegrated_source {
    label "unintegrated source code";
}

artefact mi_integrated_source {
    label "integrated source code";
}

activity mi_commit {
    label "commit";
    transform mi_sourcecode;
    create mi_unintegrated_source;
}

activity mi_integrate {
    label "integrate";
    responsible mi_integrator;
    transform mi_unintegrated_source;
    create mi_integrated_source;
}

activity mi_build_binary {
    label "build binary";
    responsible mi_integrator;
    transform mi_integrated_source;
    create mi_customer_binary;
}

role mi_integrator {
    label "integrator";
}



artefact ping_pong {
    label "ping pong";
    brief "just some brief description of this node, which cannot make any sense, because it's only an example.";
}

activity create_ping_pong {
    label "create ping pong";
    set ping_pong(null,ping);
}

activity play {
    subactivities create_ping_pong, do_ping, do_pong;
}

activity do_ping {
    label "do ping";
    set ping_pong(pong,ping);
}

activity do_pong {
    set ping_pong(ping,pong);
}

process ai_automatic_integration {
    label "continious integration";    
    responsible ai_project_manager;
    transform ai_customer_requirements;
    create ai_customer_binary;
    repository ai_shared_folder, ai_git, ai_jenkins;
    subactivities ai_develop,ai_automated_builds;
    text md/mi/process.md;
}

artefact ai_customer_requirements {
    label "customer requirements";
}

artefact ai_customer_binary {
    label "customer binary";
}

repository ai_shared_folder {
    label "shared folder";
    contains ai_customer_requirements, mi_customer_binary;
}

repository ai_git {
    label "git";
    contains ai_masterbranch;
}

repository ai_jenkins {
    label "Jenkins build server";
    contains ai_automated_builds_folder;
}

folder ai_automated_builds_folder {
    label "automated builds";
    contains ai_customer_binary;
}

folder ai_masterbranch {
    label "master branch";
    contains ai_integrated_source;
    brief "the master branch for all code changes";
}

role ai_project_manager {
    label "process manager";
    brief "the over all responsible for this project";
}

activity ai_develop {
    label "develop";
    responsible ai_developer;
    transform ai_customer_requirements;
    subactivities ai_write_code, ai_commit;
}

activity ai_write_code {
    label "write code";
    transform ai_customer_requirements;
    create ai_sourcecode;
}

role ai_developer {
    label "developer";
    brief "In this process thes role does all the technical work";
}

namespace ai {
    include resources/blocks/dev_basic.txt;
}

artefact ai_integrated_source {
    label "integrated source code";
}

activity ai_commit {
    label "commit";
    transform ai_sourcecode;
    create ai_integrated_source;
}

activity ai_automated_builds {
    label "automated builds";
    responsible ai_jenkins_server;
    transform ai_integrated_source;
    create ai_customer_binary;
}

role ai_jenkins_server {
    label "Jenkins Server";
}

@home {
    subpages processes,
        impressum, 
        example;
    text md/home.md;
}

page example {
    label "how it is done";
    subpages buildingBlocks;
    text md/example_begin.md, 
        test.txt, 
        md/example_end.md;
}

page impressum {
    label "Legal Disclosure";
    text md/impressum.md;
}

page processes {
    label "Processes";
    subpages demo,mi_manual_integration,ai_automatic_integration;
    text md/processes.md;
}

process demo {
    label "Demo";
    responsible project_manager;
    transform customer_requirements;
    create delivery;
    repository git,
        jenkins,
        mantis;
    subactivities project_management,
        requitements_management,
        system_engineering,
        software_development,
        software_test, play;
    text md/demo/process.md;
}

activity project_management {
    label "project management";
}

activity requitements_management {
    label "requirements management";
    brief "some detaild description which can be shown in the tooltip";
    responsible requirements_engineer;
    subactivities review_customer_requirements,
        create_system_requirements,
        create_hardware_requirements,
        create_software_requirements;
}

activity system_engineering {
    label "system engineering";
}

activity software_development {
    label "software development";
    brief "some detaild description which can be shown in the tooltip";
    text md/dbg.md;
}

activity software_test {
    label "software test";
    text md/dbg.md;
}

activity review_customer_requirements {
    label "review customer requirements";
}

activity create_system_requirements {
    label "create system requirements";
    transform customer_requirements;
    create system_requirements;
}

activity create_hardware_requirements {
    label "create hardware requirements";
}

activity create_software_requirements {
    label "create software requirements";
}

role project_manager {
    label "project manager";
    brief "the process manager is the overall responsible for a project";
    text md/project_manager.md;
}

role requirements_engineer {
    label "requirements engineer";
    text md/dbg.md;
}

artefact customer_requirements {
    label "customer requirements";
}

artefact system_requirements {
    label "system requirements";
}

artefact delivery {
}

repository git {
    label "git";
    contains requirements_folder;
}

repository mantis {
    label "Mantis";
    contains ping_pong;
}

repository jenkins {
    label "Jenkins";
}

folder requirements_folder {
    label "requirements";
    contains customer_requirements_folder,
        system_requirements_folder,
        hardware_requirements_folder,
        software_requirements_folder;
}

folder customer_requirements_folder {
    label "customer requirements";
    contains customer_requirements;
}

folder system_requirements_folder {
    label "system requirements";
    contains system_requirements;
}

folder hardware_requirements_folder {
    label "hardware requirements";
}

folder software_requirements_folder {
    label "software requirements";
}



